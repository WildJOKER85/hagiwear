const express = require('express');
const router = express.Router();
const bcrypt = require('bcrypt');
const db = require('../db');
// const authMiddleware = require('../middleware/authMiddleware');
const { body, validationResult, check } = require('express-validator');
const multer = require('multer');
const path = require('path');
const fs = require('fs');
const fsPromises = fs.promises;

// --- Multer: –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ ---
const storage = multer.diskStorage({
   destination: (req, file, cb) => {
      const dir = path.join(__dirname, '..', 'images', 'products');
      fs.mkdirSync(dir, { recursive: true });
      cb(null, dir);
   },
   filename: (req, file, cb) => {
      const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1e9);
      cb(null, uniqueSuffix + path.extname(file.originalname));
   },
});
const upload = multer({ storage });

// -------------------------------------------
// –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º, –ø–æ—Ç–æ–º—É —á—Ç–æ —É —Ç–µ–±—è –µ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π auth.js,
// –Ω–æ –µ—Å–ª–∏ —ç—Ç–æ—Ç –¥—É–±–ª–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É ‚Äî –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å auth.js,
// –∏ –≤ product.js —É–±—Ä–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è.
// –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:

router.post(
   '/register',
   [
      body('name').notEmpty().withMessage('–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'),
      body('email').isEmail().withMessage('–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email'),
      body('password').isLength({ min: 6 }).withMessage('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤'),
      body('confirmPassword').custom((value, { req }) => {
         if (value !== req.body.password) {
            throw new Error('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
         }
         return true;
      }),
   ],
   async (req, res) => {
      const errors = validationResult(req);
      if (!errors.isEmpty()) {
         return res.status(400).json({ errors: errors.array() });
      }

      const { name, email, password } = req.body;

      try {
         const [existingUsers] = await db.execute('SELECT * FROM users WHERE email = ?', [email]);

         if (existingUsers.length > 0) {
            return res.status(400).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
         }

         const hashedPassword = await bcrypt.hash(password, 10);

         await db.execute(
            'INSERT INTO users (name, email, password) VALUES (?, ?, ?)',
            [name, email, hashedPassword]
         );

         res.status(201).json({ message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞' });
      } catch (err) {
         console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', err);
         res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
      }
   }
);

// -------------------------------------------
// –ó–∞—â–∏—â–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ ‚Äî –Ω—É–∂–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è,
// –Ω–æ –ø—Ä–∏ —Ç–µ—Å—Ç–∞—Ö –º–æ–∂–µ—Ç –º–µ—à–∞—Ç—å. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ ‚Äî 
// –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π authMiddleware –∑–¥–µ—Å—å:

router.get('/admin/products',
   // authMiddleware, // <--- –µ—Å–ª–∏ –º–µ—à–∞–µ—Ç –ø—Ä–∏ —Ç–µ—Å—Ç–∞—Ö ‚Äî –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å
   async (req, res) => {
      try {
         const [rows] = await db.query('SELECT * FROM products_new');
         res.json(rows);
      } catch (err) {
         console.error(err);
         res.status(500).json({ error: '’ç’•÷Ä’æ’•÷Ä’´ ’Ω’≠’°’¨ (Server error)' });
      }
   }
);

// -------------------------------------------
// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ ‚Äî
// –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —Ç.–∫. —É —Ç–µ–±—è –Ω–µ—Ç authMiddleware,
// –Ω–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å authMiddleware –¥–ª—è –∑–∞—â–∏—Ç—ã:

router.post('/', upload.array('images', 3), async (req, res) => {
   try {
      const {
         name,
         description,
         price,
         discount,
         color_id,
         size_id,
         quantity
      } = req.body;

      const [result] = await db.query(
         `INSERT INTO products_new (name, description, price, discount) VALUES (?, ?, ?, ?)`,
         [name, description, price, discount]
      );

      const productId = result.insertId;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏
      const imageTypes = ['main', 'thumb1', 'thumb2'];
      for (let i = 0; i < req.files.length; i++) {
         const file = req.files[i];
         const imageType = imageTypes[i] || 'main'; // fallback
         const imageUrl = `/images/products/${file.filename}`;

         await db.query(
            `INSERT INTO product_images (product_id, image_url, image_type) VALUES(?, ?, ?)`,
            [productId, imageUrl, imageType]
         );
      }

      // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç, —Ä–∞–∑–º–µ—Ä –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ product_stock_new
      if (color_id && size_id && quantity) {
         await db.query(
            `INSERT INTO product_stock_new (product_id, color_id, size_id, quantity) VALUES (?, ?, ?, ?)`,
            [productId, color_id, size_id, quantity]
         );
      }

      res.status(201).json({ message: '‚úÖ –ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω', productId });
   } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞:', err);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞' });
   }
});


// -------------------------------------------
// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏ ‚Äî –ø—É–±–ª–∏—á–Ω—ã–π —Ä–æ—É—Ç, –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:

router.get('/', async (req, res) => {
   try {
      res.setHeader('Cache-Control', 'no-store');

      const [rows] = await db.query(`
         SELECT
         p.id, p.name, p.description, p.price, p.discount, p.created_at,
            (SELECT pi.image_url FROM product_images pi WHERE pi.product_id = p.id AND pi.image_type = 'main' LIMIT 1) AS main_image,
               (SELECT pi.image_url FROM product_images pi WHERE pi.product_id = p.id AND pi.image_type = 'thumb1' LIMIT 1) AS thumb1,
                  (SELECT pi.image_url FROM product_images pi WHERE pi.product_id = p.id AND pi.image_type = 'thumb2' LIMIT 1) AS thumb2
        FROM products_new p
        ORDER BY p.created_at DESC
      `);

      const host = `${req.protocol}://${req.get('host')}`;

      function makeFullUrl(imageUrl) {
         if (!imageUrl) return null;
         const cleanPath = imageUrl.replace(/^\/+/, '');
         return `${host}/${cleanPath}`;
      }

      const products = rows.map(p => ({
         ...p,
         main_image: makeFullUrl(p.main_image),
         thumb1: makeFullUrl(p.thumb1),
         thumb2: makeFullUrl(p.thumb2),
      }));

      console.log('–û—Ç–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏:', products.map(p => ({
         id: p.id,
         main_image: p.main_image,
         thumb1: p.thumb1,
         thumb2: p.thumb2,
      })));

      res.json(products);
   } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤:', err);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤' });
   }
});

// -------------------------------------------
// ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏
// ‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞
// üîê –î–æ–±–∞–≤—å authMiddleware –ø–æ–∑–∂–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

router.post(
   '/products',
   upload.fields([
      { name: 'main_image', maxCount: 1 },
      { name: 'thumb1', maxCount: 1 },
      { name: 'thumb2', maxCount: 1 },
   ]),
   [
      check('name').notEmpty().withMessage('‘±’∂’∏÷Ç’∂’® ’∫’°÷Ä’ø’°’§’´÷Ä ’ß'),
      check('price').isFloat({ gt: 0 }).withMessage('‘≥’´’∂’® ’∫’•’ø÷Ñ ’ß ’¥’•’Æ ’¨’´’∂’´ 0-’´÷Å'),
      // –î—Ä—É–≥–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ –º–µ—Ä–µ –Ω–∞–¥–æ–±–Ω–æ—Å—Ç–∏
   ],
   async (req, res) => {
      const errors = validationResult(req);
      if (!errors.isEmpty()) {
         // üßπ –£–¥–∞–ª—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞
         if (req.files) {
            Object.values(req.files).flat().forEach(file => fs.unlinkSync(file.path));
         }
         return res.status(400).json({ errors: errors.array() });
      }

      try {
         const { name, price, discount, description } = req.body;

         // ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ sizes –∏ quantities –∏–∑ —Ñ—Ä–æ–Ω—Ç–∞
         let sizes = [];
         let quantities = [];
         try {
            sizes = typeof req.body.sizes === 'string' ? JSON.parse(req.body.sizes) : req.body.sizes;
            quantities = typeof req.body.quantities === 'string' ? JSON.parse(req.body.quantities) : req.body.quantities;
         } catch (e) {
            return res.status(400).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç sizes –∏–ª–∏ quantities' });
         }

         // ‚úÖ –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä –≤ products_new
         const [result] = await db.execute(
            `INSERT INTO products_new (name, price, discount, description) VALUES (?, ?, ?, ?)`,
            [name, price, discount || 0, description || '']
         );
         const productId = result.insertId;

         // ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
         const images = [];
         if (req.files.main_image?.[0]) {
            images.push({
               product_id: productId,
               image_url: `/images/products/${req.files.main_image[0].filename}`,
               image_type: 'main',
            });
         }
         if (req.files.thumb1?.[0]) {
            images.push({
               product_id: productId,
               image_url: `/images/products/${req.files.thumb1[0].filename}`,
               image_type: 'thumb1',
            });
         }
         if (req.files.thumb2?.[0]) {
            images.push({
               product_id: productId,
               image_url: `/images/products/${req.files.thumb2[0].filename}`,
               image_type: 'thumb2',
            });
         }
         console.log('Images', images);

         for (const img of images) {
            await db.execute(
               `INSERT INTO product_images (product_id, image_url, image_type) VALUES (?, ?, ?)`,
               [img.product_id, img.image_url, img.image_type]
            );
         }

         // ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–∞ (—Ä–∞–∑–º–µ—Ä—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
         const colorId = parseInt(req.body.color_id); // –¥–æ–ø—É—Å—Ç–∏–º, —Ç—ã –ø–µ—Ä–µ–¥–∞–µ—à—å –æ–¥–∏–Ω color_id

         for (let i = 0; i < sizes.length; i++) {
            const sizeId = sizes[i];
            const quantity = quantities[i] || 0;

            await db.execute(
               `INSERT INTO product_stock_new (product_id, color_id, size_id, quantity) VALUES (?, ?, ?, ?)`,
               [productId, colorId, sizeId, quantity]
            );
         }

         // üéâ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
         res.status(201).json({ message: '–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω', productId });
      } catch (err) {
         console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', err);

         // üßπ –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ
         if (req.files) {
            Object.values(req.files).flat().forEach(file => {
               fs.unlink(file.path, err => {
                  if (err) console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', err);
               });
            });
         }

         res.status(500).json({ message: '–°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞' });
      }
   }
);

// --- DELETE /api/products/:id ---
// –£–±—Ä–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ authMiddleware, —á—Ç–æ–±—ã –Ω–µ —Ç—Ä–µ–±–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω –ø—Ä–∏ —Ç–µ—Å—Ç–∞—Ö —É–¥–∞–ª–µ–Ω–∏—è
router.delete('/:id', async (req, res) => {
   const productId = req.params.id;

   try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
      const [images] = await db.query('SELECT image_url FROM product_images WHERE product_id = ?', [productId]);

      // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏
      for (const img of images) {
         const relativePath = img.image_url.replace(/^\/+/, '');
         const filePath = path.join(__dirname, '..', relativePath);

         try {
            await fsPromises.access(filePath);
            await fsPromises.unlink(filePath);
            console.log('–£–¥–∞–ª—ë–Ω —Ñ–∞–π–ª:', filePath);
         } catch (err) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', filePath, err.message);
         }
      }

      // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –ë–î
      await db.query('DELETE FROM product_images WHERE product_id = ?', [productId]);

      // –£–¥–∞–ª—è–µ–º —Å–∞–º —Ç–æ–≤–∞—Ä
      await db.query('DELETE FROM products_new WHERE id = ?', [productId]);

      res.json({ message: '–¢–æ–≤–∞—Ä –∏ –≤—Å–µ —Ñ–æ—Ç–æ —É–¥–∞–ª–µ–Ω—ã' });
   } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:', err);
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞' });
   }
});

// -------------------------------------------
// –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ä—É—Ç—ã (colors, sizes, filter, stock) ‚Äî –ø—É–±–ª–∏—á–Ω—ã–µ, –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
// –ï—Å–ª–∏ —Ö–æ—á–µ—à—å, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞—â–∏—Ç—É, –Ω–æ –æ–±—ã—á–Ω–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è:
router.get('/colors', async (req, res) => {
   try {
      const [rows] = await db.query('SELECT * FROM colors ORDER BY name ASC');
      res.json(rows);
   } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–≤–µ—Ç–æ–≤:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–≤–µ—Ç–æ–≤' });
   }
});

router.get('/sizes', async (req, res) => {
   try {
      const [rows] = await db.query('SELECT * FROM sizes ORDER BY name ASC');
      res.json(rows);
   } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–≤:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–≤' });
   }
});

router.get('/filter', async (req, res) => {
   try {
      const {
         name,
         color_id,
         size_id,
         discount_only,
         price_min,
         price_max,
         date_from,
         date_to,
      } = req.query;

      const conditions = ['1=1'];
      const params = [];

      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
      if (name && name.trim() !== '') {
         conditions.push('p.name LIKE ?');
         params.push(`%${name.trim()}%`);
      }

      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å–∫–∏–¥–∫–µ
      if (discount_only === 'true') {
         conditions.push('p.discount > 0');
      }

      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ü–µ–Ω–µ
      if (price_min && price_min.trim() !== '') {
         conditions.push('p.price >= ?');
         params.push(price_min);
      }
      if (price_max && price_max.trim() !== '') {
         conditions.push('p.price <= ?');
         params.push(price_max);
      }

      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ
      if (date_from && date_from.trim() !== '') {
         conditions.push('p.created_at >= ?');
         params.push(date_from);
      }
      if (date_to && date_to.trim() !== '') {
         conditions.push('p.created_at <= ?');
         params.push(date_to);
      }

      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ü–≤–µ—Ç—É –∏ —Ä–∞–∑–º–µ—Ä—É –±—É–¥–µ—Ç –≤ WHERE –ø–æ joined —Ç–∞–±–ª–∏—Ü–∞–º
      if (color_id && color_id.trim() !== '') {
         conditions.push('ps.color_id = ?');
         params.push(color_id);
      }
      if (size_id && size_id.trim() !== '') {
         conditions.push('ps.size_id = ?');
         params.push(size_id);
      }

      // –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å: —Ç–æ–≤–∞—Ä—ã + –æ—Å—Ç–∞—Ç–∫–∏ + —Ü–≤–µ—Ç + —Ä–∞–∑–º–µ—Ä
      const sql = `
      SELECT 
        p.*,
        ps.color_id, 
        c.name as color_value, 
        c.label_armenian as color_label,
        ps.size_id, 
        s.name as size_name,
        ps.quantity
      FROM products_new p
      LEFT JOIN product_stock_new ps ON ps.product_id = p.id
      LEFT JOIN colors c ON ps.color_id = c.id
      LEFT JOIN sizes s ON ps.size_id = s.id
      WHERE ${conditions.join(' AND ')}
      ORDER BY p.created_at DESC
    `;

      const [rows] = await db.query(sql, params);

      // –í–µ—Ä–Ω—ë–º –º–∞—Å—Å–∏–≤ ‚Äî –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å –ø—Ä–æ–¥—É–∫—Ç–æ–º –∏ –æ–¥–Ω–∏–º —Å–æ—á–µ—Ç–∞–Ω–∏–µ–º —Ü–≤–µ—Ç-—Ä–∞–∑–º–µ—Ä-–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      res.json(rows);

   } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤' });
   }
});

// GET: –ü–æ–ª—É—á–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É (–ø–æ product_id)
router.get('/stock/:productId', async (req, res) => {
   try {
      const { productId } = req.params;

      const [stockRows] = await db.query(`
         SELECT 
            psn.id,
            psn.product_id,
            psn.color_id,
            c.name AS color_name,
            psn.size_id,
            s.name AS size_name,
            psn.quantity
         FROM product_stock_new psn
         LEFT JOIN colors c ON psn.color_id = c.id
         LEFT JOIN sizes s ON psn.size_id = s.id
         WHERE psn.product_id = ?
      `, [productId]);

      res.json(stockRows);
   } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤:', error);
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤' });
   }
});

// ------------------------------------------
// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ ‚Äî –ø—É–±–ª–∏—á–Ω—ã–π —Ä–æ—É—Ç, –æ–±—ã—á–Ω–æ –Ω—É–∂–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è,
// –µ—Å–ª–∏ –º–µ—à–∞–µ—Ç –ø—Ä–∏ —Ç–µ—Å—Ç–∞—Ö ‚Äî –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π authMiddleware (–Ω–µ –ø–æ–∫–∞–∑–∞–Ω –≤ —Ç–≤–æ—ë–º –∫–æ–¥–µ)

router.post('/stock', async (req, res) => {
   const { productId, color_id, size_id, quantity } = req.body;

   try {
      const q = Number(quantity);
      if (isNaN(q)) {
         return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ quantity' });
      }

      const [rows] = await db.execute(
         'SELECT id FROM product_stock_new WHERE product_id = ? AND color_id = ? AND size_id = ?',
         [productId, color_id, size_id]
      );

      if (rows.length > 0) {
         await db.execute(
            'UPDATE product_stock_new SET quantity = ? WHERE product_id = ? AND color_id = ? AND size_id = ?',
            [q, productId, color_id, size_id]
         );
      } else {
         await db.execute(
            'INSERT INTO product_stock_new (product_id, color_id, size_id, quantity) VALUES (?, ?, ?, ?)',
            [productId, color_id, size_id, q]  // —Ç—É—Ç —Ç–æ–∂–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å q
         );
      }

      res.json({ success: true });
   } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Å—Ç–∞—Ç–∫–∞:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Å—Ç–∞—Ç–∫–∞' });
   }
});

module.exports = router;
